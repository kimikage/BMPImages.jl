var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [BMPImages]\nPrivate = true\nOrder = [:module, :type]","category":"page"},{"location":"api/#BMPImages.BMPImages","page":"API Reference","title":"BMPImages.BMPImages","text":"BMPImages provides the I/O support for Windows Bitmap (*.bmp) files.\n\nAPIs\n\nread_bmp\nread_bmp_header\nwrite_bmp\nadd_bmp_format\n\n\n\n\n\n","category":"module"},{"location":"api/#BMPImages.BMPImageHeader","page":"API Reference","title":"BMPImages.BMPImageHeader","text":"BMPImageHeader\n\nA mutable struct that holds the file header, information header, and color table for a bitmap.\n\nThe order and type of fields roughly follow the original specifications.\n\nFor details, see the document provided by Microsoft\n\nFields\n\nsignature :: UInt16\nfilesize :: UInt32\noffset :: UInt32\nheadersize :: UInt32\nwidth :: Int32\nheight :: Int32\nplanes :: UInt16\nbitcount :: UInt16\ncompression :: BMPImages.Compression\nimagesize :: UInt32\nxppm :: Int32\nyppm :: Int32\ncolors_used :: UInt32\ncolors_important :: UInt32\nred_mask :: UInt32\ngreen_mask :: UInt32\nblue_mask :: UInt32\nalpha_mask :: UInt32\ncolorspace :: UInt32\nendpoints :: XYZTriple\ngamma_red :: Q15f16\ngamma_green :: Q15f16\ngamma_blue :: Q15f16\nintent :: UInt32\nprofile_offset :: UInt32\nprofile_size :: UInt32\ncolortable :: Vector{<:Colorant}\nprofile :: Vector{UInt8}\n\n\n\n\n\n","category":"type"},{"location":"api/#BMPImages.Compression","page":"API Reference","title":"BMPImages.Compression","text":"BMPImages.Compression{id}\n\nA singleton type for compression mode.\n\nDefined instances\n\nBI_RGB\nBI_RLE8\nBI_RLE4\nBI_BITFIELDS\nBI_JPEG\nBI_PNG\n\n\n\n\n\n","category":"type"},{"location":"api/#BMPImages.XYZTriple","page":"API Reference","title":"BMPImages.XYZTriple","text":"BMPImages.XYZTriple\n\nA type for RGB color primaries.\n\nFields\n\nred :: XYZq1f30\ngreen :: XYZq1f30\nblue :: XYZq1f30\n\n\n\n\n\n","category":"type"},{"location":"api/#BMPImages.XYZq1f30","page":"API Reference","title":"BMPImages.XYZq1f30","text":"BMPImages.XYZq1f30 <: Color3{Q1f30}\n\nXYZ color type with component type Q1f30.\n\nFields\n\nx :: Q1f30\ny :: Q1f30\nz :: Q1f30\n\nExamples\n\njulia> using Colors;\n\njulia> d65 = BMPImages.XYZq1f30(0.95047, 1.0, 1.08883)\nXYZq1f30(0.9504699996Q1f30,1.0Q1f30,1.0888299998Q1f30)\n\njulia> XYZ(d65.x, d65.y, d65.z)\nXYZ{Float32}(0.95047f0,1.0f0,1.08883f0)\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [BMPImages]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"api/#BMPImages.add_bmp_format","page":"API Reference","title":"BMPImages.add_bmp_format","text":"add_bmp_format()\n\nRegister format\"BMP\" to FileIO specifying BMPImages as the primary provider of the loader/saver.\n\nwarning: Warning\nThis function forcefully rewrites the internal registry of FileIO.\n\n\n\n\n\n","category":"function"},{"location":"api/#BMPImages.read_bmp-Tuple{AbstractString}","page":"API Reference","title":"BMPImages.read_bmp","text":"read_bmp(filepath::AbstractString; kwargs...)\nread_bmp(io::IO; kwargs...)\n\nRead a BMP image from the specified file or IO object.\n\nKeyword arguments\n\nnot supported yet\n\nReturn types\n\nMatrix{RGB{N0f8}}: default\nMatrix{Gray{N0f8}}: for 4-bit or 8-bit indexed grayscale images\nMatrix{Gray{Bool}}: for binary grayscale (black and white) images\n\n\n\n\n\n","category":"method"},{"location":"api/#BMPImages.read_bmp_header-Tuple{AbstractString}","page":"API Reference","title":"BMPImages.read_bmp_header","text":"read_bmp_header(filepath::AbstractString) -> BMPImageHeader\nread_bmp_header(io::IO) -> BMPImageHeader\n\nRead the BMP image header from the specified file or IO object.\n\n\n\n\n\n","category":"method"},{"location":"api/#BMPImages.write_bmp-Tuple{AbstractString, Any}","page":"API Reference","title":"BMPImages.write_bmp","text":"write_bmp(filepath::AbstractString, image; kwargs...)\nwrite_bmp(io::IO, image; kwargs...)\n\nWrite a image as a BMP image to the specified file or IO object.\n\nKeyword arguments\n\nppi::Real: pixel density in pixels per inch\nexpand_paletted::Bool: If true, the color table is not used regardless of the number of colors used. Default to false.\n\n\n\n\n\n","category":"method"},{"location":"#BMPImages.jl","page":"Introduction","title":"BMPImages.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package provides the I/O support for Windows Bitmap (*.bmp) files.","category":"page"},{"location":"#Basic-Usage","page":"Introduction","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To load a BMP image (for example, \"example.bmp\"), use read_bmp().","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Colors\nusing FixedPointNumbers\n\nusing BMPImages\n\nimg = read_bmp(joinpath(\"assets\", \"example.bmp\"))","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To save a image as a BMP image, use write_bmp().","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"gsimg = Gray{N4f4}.(img) # to 4-bit grayscale image\n\nwrite_bmp(joinpath(\"assets\", \"grayscale.bmp\"), gsimg);","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: grayscale.bmp)","category":"page"},{"location":"#FileIO-Integration","page":"Introduction","title":"FileIO Integration","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"BMPImages.jl supports the FileIO interface, but does not register the loader and saver by default. To make the registration, run add_bmp_format().","category":"page"},{"location":"#Indexed-Color-Images","page":"Introduction","title":"Indexed Color Images","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The BMP format supports 1-, 4-, and 8-bit indexd color images. When BMPImages reads an indexed color image, it replaces the index with the actual color. Also, when saving an image, if the number of colors used is not greater than 2, 16, or 256, it is saved as an indexed color image with the corresponding bit depth (1, 4, or 8).","category":"page"},{"location":"#Grayscale-Images","page":"Introduction","title":"Grayscale Images","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A special case of indexed color images is grayscale images.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"BMPImages reads an indexed color image as a Gray image instead of an RGB image only if the color table is uniformly placed black to white. In other words, an image whose indices and intensities do not completely correspond is read as an RGB image, even if all the colors used are gray.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For example, the \"grayscale.bmp\" saved in the example above is loaded as a Gray{N0f8} array.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"summary(read_bmp(joinpath(\"assets\", \"grayscale.bmp\")))","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The exception is binary (black and white) images. BMPImages returns Gray{Bool} images for binary images regardless of whether the color table is in white-to-black or black-to-white order.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"After you have loaded an image, you can convert its color type to your desired one.","category":"page"}]
}
